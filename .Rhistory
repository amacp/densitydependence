getwd()
setwd("/Users/dehaas/")
setwd("/Users/dehaas/Documents/densitydependence")
read.csv("data_type1.csv")
a <- read.csv("data_type1.csv")
View(a)
data1 <- read.csv("data_type1.csv")
data2 <- read.csv("data_type2.csv")
data1
library(plotly)
install.packages("plotly")
library(plotly)
p <- plot_ly(
x = c(-9, -6, -5, -3, -1),
y = c(0, 1, 4, 5, 7),
z = matrix(c(10, 10.625, 12.5, 15.625, 20, 5.625, 6.25, 8.125, 11.25, 15.625, 2.5, 3.125, 5, 8.125, 12.5, 0.625, 1.25, 3.125,
6.25, 10.625, 0, 0.625, 2.5, 5.625, 10), nrow = 5, ncol = 5),
type = "contour"
)
p
p <- plot_ly(z = ~volcano, type = "contour")
p
p <- plot_ly(z = data1, type = "contour")
p
data1
as.matrix(data1)
data1mat <- as.matrix(data1)
p <- plot_ly(z = data1mat, type = "contour")
p
p <- plot_ly(z = as.matrix(data2), type = "contour")
p
log(as.matrix(data2))
p <- plot_ly(z = as.matrix(data1)+1, type = "contour")
p
p <- plot_ly(z = as.matrix(data2)+1, type = "contour")
p
p <- plot_ly(z = as.matrix(data2)+10, type = "contour")
p
p <- plot_ly(z = as.matrix(data1), type = "contour")
p <- plot_ly(z = as.matrix(data2), type = "contour")
p
p <- plot_ly(z = as.matrix(data2), type = "contour",
autocontour = F,
)
p
p <- plot_ly(z = as.matrix(data2), type = "contour",
autocontour = F,
),
contours = list(
start = 0,
end = 8,
size = 2
p
p <- plot_ly(z = as.matrix(data1), type = "contour")
p <- plot_ly(z = as.matrix(data2), type = "contour",
autocontour = F,
contours = list(
start = 0,
end = 8,
size = 2
),
p
p <- plot_ly(z = as.matrix(data2), type = "contour",
autocontour = F,
contours = list(
start = 0,
end = 8,
size = 2
))
p
p <- plot_ly(z = as.matrix(data2), type = "contour",
autocontour = F,
contours = list(
start = 0,
end = 1,
size = 2
))
p
p <- plot_ly(z = as.matrix(data2), type = "contour",
autocontour = F,
contours = list(
start = 0,
end = 1,
size = 0.1
))
p
p <- plot_ly(z = as.matrix(data2), type = "contour",
autocontour = F,
contours = list(
start = 0,
end = 1,
size = 0.01
))
p
p <- plot_ly(z = as.matrix(data2), type = "contour",
autocontour = F,
contours = list(
start = 0,
end = 1,
size = 0.001
))
p
p <- plot_ly(z = as.matrix(data2), type = "contour",
autocontour = F,
contours = list(
start = 0,
end = 1,
size = 0.01
))
p
p <- plot_ly(z = as.matrix(data2), type = "contour",
autocontour = F,
colorscale = 'Jet',
contours = list(
start = 0,
end = 1,
size = 0.01
))
p
log(0)
p <- plot_ly(z = as.matrix(data2), type = "contour",
autocontour = F,
colorscale = 'Jet',
contours = list(
start = 0.9,
end = 1,
size = 0.01
))
p
p <- plot_ly(z = as.matrix(data2), type = "heatmap",
autocontour = F,
colorscale = 'Jet',
contours = list(
start = 0.9,
end = 1,
size = 0.01
))
p
p <- plot_ly(z = as.matrix(data2), type = "heatmap",
autocontour = F,
colorscale = 'Jet')
p
p <- plot_ly(z = as.matrix(data2), type = "heatmap",
colorscale = 'Jet')
p
p <- plot_ly(z = as.matrix(data2), type = "heatmap")
p
p <- plot_ly(z = as.matrix(data2), type = "heatmap",
colorscale = 'Viridis')
p
p1 <- plot_ly(z = as.matrix(data1), type = "heatmap",
colorscale = 'Viridis')
p2 <- plot_ly(z = as.matrix(data2), type = "heatmap",
colorscale = 'Viridis')
p
p1
plotly_IMAGE(p1, width = 500, height = 500, format = "png", scale = 2,
out_file = "~/desktop/test.png")
export(p1, file = "image.png")
require(lattice)
library(lattice)
head(volcano)
levelplot(volcano)
levelplot(as.matrix(data1))
levelplot(as.matrix(data1), scales = list(tck = c(1,0))
levelplot(as.matrix(data1), scales = list(tck = c(1,0)))
levelplot(as.matrix(data1), scales = list(tck = c(1,0))
?levelplot
levelplot(as.matrix(data1), xlab = "", ylab = "")
levelplot(as.matrix(data1), row.values = seq_len(nrow(x)),
column.values = seq_len(ncol(x)))
x = 1
levelplot(as.matrix(data1), row.values = seq_len(nrow(x)),
column.values = seq_len(ncol(x)))
levelplot(as.matrix(data1), row.values = seq_len(nrow(as.matrix(data1))),
column.values = seq_len(ncol(as.matrix(data1))))
View(data1mat)
p1
p2
orca()
?orca
orca(p1,"plot.png")
if (!require("processx")) install.packages("processx")
orca(p1, "surface-plot.png")
p1 <- plot_ly(z = as.matrix(data1), type = "heatmap",
colorscale = 'Viridis')
p2 <- plot_ly(z = as.matrix(data2), type = "heatmap",
colorscale = 'Viridis')
p2
setwd("/Users/dehaas/Documents/densitydependence")
data1 <- read.csv("data_type1.csv")
data2 <- read.csv("data_type2.csv")
library(plotly)
p1 <- plot_ly(z = as.matrix(data1), type = "heatmap",
colorscale = 'Viridis')
p2 <- plot_ly(z = as.matrix(data2), type = "heatmap",
colorscale = 'Viridis')
p1
p2
p1
p1
p2
p1
p1
p2
setwd("/Users/dehaas/Documents/densitydependence")
data1 <- read.csv("data_type1.csv")
data2 <- read.csv("data_type2.csv")
library(plotly)
p1 <- plot_ly(z = as.matrix(data1), type = "heatmap",
colorscale = 'Viridis')
p2 <- plot_ly(z = as.matrix(data2), type = "heatmap",
colorscale = 'Viridis')
p1
p2
p2
p1
p1
p2
setwd("/Users/dehaas/Documents/densitydependence")
data1 <- read.csv("data_type1.csv")
data2 <- read.csv("data_type2.csv")
library(plotly)
p1 <- plot_ly(z = as.matrix(data1), type = "heatmap",
colorscale = 'Viridis')
p2 <- plot_ly(z = as.matrix(data2), type = "heatmap",
colorscale = 'Viridis')
p1
p2
p1
p2
p1
df
q()
